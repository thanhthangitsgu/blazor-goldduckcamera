@page "/user/index"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient _httpClient
@attribute [Authorize(Roles = "admin")]
<div class="title" style="text-align:center">
    <h3 style="font-weight: bold;">USER MANAGEMENT</h3><br />
</div>
<div class="row">
    <div class="col-sm-4">
        <div class="form-group position-relative has-icon-right">
            <input type="text" class="form-control" placeholder="Search..." @bind="@search">
            <button class="btn form-control-icon" style="border:none;" @onclick="@Search">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="col-sm-2">
        <select class="form-select" @bind="@permission">
            <option value="0">Permission</option>
            @foreach (var c in permissionList)
            {
                @if (c.status == 1)
                {
                    <option value="@c.id">@c.name</option>
                }
            }
        </select>
    </div>
    <div class="col-sm-6">
        <a href="/user/adduser" style="float:right">
            <button class="btn btn-success"><i class="bi bi-person-plus-fill icon-mid"></i> Add user</button>
        </a>
    </div>
</div>
<br />
<div class="row">
    @if (userList1 != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>User name</th>
                    <th>Full name</th>
                    <th>Date of birth</th>
                    <th>Gender</th>
                    <th>Address</th>
                    <th>Phone</th>
                    <th>Permission</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in userList1)
                {
                    <tr>
                        <td>
                            @p.username
                        </td>
                        <td>@p.fullname</td>
                        <td>@String.Format("{0:dd/MM/yyyy}",p.date)</td>
                        <td>@p.gender</td>
                        <td>@p.address</td>
                        <td>@p.phone</td>
                        @foreach (var b in permissionList)
                        {
                            @if (b.id == p.idPermission)
                            {
                                <td>@b.name</td>
                            }
                        }
                        <td>
                            <a href="/user/edituser/@p.username">
                                <button type="button" class="btn btn-sm btn-outline-success" style="padding-top: 7px;">
                                    <i class="bi bi-gear"></i>
                                </button>
                            </a>
                            <button type="button" class="btn btn-sm btn-outline-danger" style="padding-top: 7px;" @onclick="@(e => Delete_Click(p.username))">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
                <Confirmation ConfirmationMessage="@($"Are you sure to delete?")"
                          ConfirmationTitle="Delete User"
                          @ref="DeleteConfirmation"
                          ConfirmationChanged="ConfirmDelete_Click">
                </Confirmation>
            </tbody>
        </table>
    }
</div>
<br />
<div class="row">
    <div class="pagination justify-content-center mb-2">
        @if (pagenum != 1)
        {
            <button class="m-1 page-item btn btn-outline-dark" onclick="@PrePage"><i class="bi bi-caret-left"></i></button>
        }
        else
        {
            <button class="m-1 page-item btn btn-outline-dark disabled"><i class="bi bi-caret-left"></i></button>
        }
        @for (int i = 0; i < @totalPage; i++)
        {
            int index = i;
            <a id="page-@i" class="m-1 page-item btn btn-outline-dark @activeClass[i]"
           @onclick="@(e => PageCurrent(index+1))" value="@(i+1)">@(i+1)</a>
        }
        @if (pagenum != totalPage)
        {
            <button class="m-1 page-item btn btn-outline-dark" onclick="@NextPage"><i class="bi bi-caret-right"></i></button>
        }
        else
        {
            <button class="m-1 page-item btn btn-outline-dark disabled"><i class="bi bi-caret-right"></i></button>
        }
    </div>
</div>
<br />
<br />
<br />
<br />
<br />
@code {
    int pagenum = 1;
    int totalPage = 0;
    string search = "";
    int permission = 0;
    UserViewModel p = new UserViewModel();
    List<string> activeClass = new List<string>();
    List<UserViewModel> userList = new List<UserViewModel>();
    List<UserViewModel> userList1 = new List<UserViewModel>();
    List<PermissionViewModel> permissionList = new List<PermissionViewModel>();
    public string username { get; set; }
    protected Confirmation DeleteConfirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.GetAsync("api/user");
        response.EnsureSuccessStatusCode();
        userList = await response.Content.ReadFromJsonAsync<List<UserViewModel>>();
        userList = new List<UserViewModel>(userList.Where(p => p.status == 1));

        var response1 = await _httpClient.GetAsync("api/permission");
        response1.EnsureSuccessStatusCode();
        permissionList = await response1.Content.ReadFromJsonAsync<List<PermissionViewModel>>();

        double total = userList.Count / 10.0;
        totalPage = (int)Math.Ceiling(total);
        for (int i = (pagenum - 1) * 10; i < pagenum * 10; i++)
        {
            if (i < userList.Count)
            {
                userList1.Add(userList[i]);
            }
            else break;
        }
        for (int i = 0; i < totalPage; i++)
        {
            activeClass.Add("");
        }
        activeClass[0] = "active";
    }

    protected void Delete_Click(string Username)
    {
        username = Username;
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var response = await Http.DeleteAsync("api/user/" + username);
            bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
            if (deleteResponse)
            {
                var response1 = await _httpClient.GetAsync("api/user");
                response1.EnsureSuccessStatusCode();
                userList = await response1.Content.ReadFromJsonAsync<List<UserViewModel>>();
                userList = new List<UserViewModel>(userList.Where(p => p.status == 1));
                double total = userList.Count / 10.0;
                totalPage = (int)Math.Ceiling(total);
                if (userList1.Count == 1)
                    PageCurrent(1);
                else PageCurrent(pagenum);
            }
        }
    }

    public async void PageCurrent(int index)
    {
        pagenum = index;
        userList1.Clear();
        for (int i = (pagenum - 1) * 10; i < pagenum * 10; i++)
        {
            if (i < userList.Count)
            {
                userList1.Add(userList[i]);
            }
            else break;
        }
        for (int i = 0; i < totalPage; i++)
        {
            activeClass[i] = "";
        }
        activeClass[index - 1] = "active";
        await JsRuntime.InvokeVoidAsync("ScrollToTop");
    }

    public async void NextPage()
    {
        pagenum += 1;
        PageCurrent(pagenum);
    }

    public async void PrePage()
    {
        pagenum -= 1;

        PageCurrent(pagenum);
    }

    public async void Search()
    {
        var response = await _httpClient.GetAsync("api/user");
        response.EnsureSuccessStatusCode();
        userList = await response.Content.ReadFromJsonAsync<List<UserViewModel>>();
        var lowerCaseSearchTerm = search.Trim().ToLower();
        if (permission != 0)
            userList = new List<UserViewModel>(userList.Where(p => ((p.username.ToLower().Contains(lowerCaseSearchTerm) || p.fullname.ToLower().Contains(lowerCaseSearchTerm) || p.gender.ToLower().Contains(lowerCaseSearchTerm) || p.address.ToLower().Contains(lowerCaseSearchTerm)) && p.idPermission == permission && p.status == 1)));
        else
            userList = new List<UserViewModel>(userList.Where(p => ((p.username.ToLower().Contains(lowerCaseSearchTerm) || p.fullname.ToLower().Contains(lowerCaseSearchTerm) || p.gender.ToLower().Contains(lowerCaseSearchTerm) || p.address.ToLower().Contains(lowerCaseSearchTerm)) && p.status == 1)));
        double total = userList.Count / 10.0;
        totalPage = (int)Math.Ceiling(total);
        PageCurrent(1);
    }
}
